#ifndef SIMULATOR_HPP
#define SIMULATOR_HPP
#include <random>
#include <vector>
#include <algorithm>
#include "../analyzer/DataStructure.hpp"
#include "../analyzer/statistics.hpp"
#include "../linear/linear.hpp"

class Simulator{
private:
	static const int maximum_horse_num;
	static std::random_device seed_gen;
	static std::mt19937 rand_engine;

public:
	//----------------------------------------------------------
	// make_win_rate_table
	//		win 			
	// Parameters:
	// 		win_rate_table 	return value. probability array
	//					   A   B   C   D
	//					A  -  0.3 0.3 0.4 ...
	//					B 0.7  -  0.5 0.7 ...
	//					. . .
	//		win_list 	win horse's value list
	//		lose_list	lose horse's value list
	//----------------------------------------------------------
	static void make_win_rate_table(std::vector<std::vector<double> >& win_rate_table, 
									const Race& race,
									const std::list<la::Vec2d>& win_list, 
									const std::list<la::Vec2d>& lose_list);

private:
	unsigned int simulation_num;
	std::vector< std::vector<int> > combination_table;

public:
	//----------------------------------------------------------
	// constructor
	// Parameters:
	// 		num 	simulatino num
	//----------------------------------------------------------
	Simulator(const unsigned int num);
	void set_simulation_num(const unsigned int num);
	//----------------------------------------------------------
	// 		montecarlo simulaton
	//		Predict the order probability 
	// Parameters:
	// 		place_prob 	return value. probability array
	//					A 1 2 3 4 ...
	//					B 1 2 3 4 ...
	//					. . .
	//		race 		race structure
	//		win_rate	The win rate between two horses
	//----------------------------------------------------------
	void run(std::vector<std::vector<double> > & place_prob, 
					const Race& race, 
					const std::vector<std::vector<double> >& win_rate);
private:
	void make_combination_table(const int n);

	unsigned int combination(const unsigned int n, const unsigned int r) const;

	// Used in run()
	bool compete(const double win_rate) const;
	
	void compete_all(std::vector<std::vector<bool> >& win_table,
						 const std::vector<std::vector<double> >& win_rate) const;

	void count_up_win(std::vector<int>& win_num_vector,
						 const std::vector<std::vector<bool> >& win_table) const;

	bool check_place(std::vector<int>& place,
				 const std::vector<int>& win_num_vector) const;
};
#endif
